import rospy 
import sys
import math
import tf.transformations as transform
import numpy as np
import time
from foxbot.srv import *
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

def setJoints(desired_joint):
    rospy.wait_for_service('/foxbot/robot_SetJoints')
    try:
        setJoints_client = rospy.ServiceProxy('/foxbot/robot_SetJoints', robot_SetJoints)
        resp1 = setJoints_client(desired_joint[0], desired_joint[1],desired_joint[2],desired_joint[3],desired_joint[4],desired_joint[5])
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def setCartesian(desired_pose):
    rospy.wait_for_service('/foxbot/robot_SetCartesian')
    try:
        setCartesian_client = rospy.ServiceProxy('/foxbot/robot_SetCartesian', robot_SetCartesian)
        resp1 = setCartesian_client(desired_pose[0], desired_pose[1],desired_pose[2],desired_pose[6],desired_pose[3],desired_pose[4],desired_pose[5],0)
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def getCartesian():
    rospy.wait_for_service('/foxbot/robot_GetCartesian')
    try:
        getCartesian_client = rospy.ServiceProxy('/foxbot/robot_GetCartesian', robot_GetCartesian)
        resp1 = getCartesian_client()
        current_pose = transform.euler_from_quaternion([resp1.qx,resp1.qy,resp1.qz,resp1.q0])
        return [resp1.x,resp1.y,resp1.z,math.degrees(current_pose[0]),math.degrees(current_pose[1]),math.degrees(current_pose[2])]
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e


if __name__ == "__main__":

    desired_joint = np.array([[0.38818359375, 46.42578125, 105.75026106126278, -5.652369449013158, 19.49273003472222, 6.134765624999999],
[1.25, 46.896565755208336, 104.594031607751, -5.825066817434211, 20.206163194444446, 7.1200195312500005],[2.1630859375, 47.32218424479168, 103.56191502939396, -6.02783203125, 20.84689670138889, 8.1861328125],
[2.524820963541667, 46.52587890625, 105.48909102336054, -6.510844983552632, 19.73090277777778, 9.032519531250001],[2.5736490885416665, 45.849202473958336, 107.1451984065598, -6.858552631578948, 18.752712673611107, 9.44208984375],
[2.630615234375, 45.10986328125, 108.98442938776338, -7.296078330592106, 17.657877604166668, 9.94921875],
[2.689615885416667, 44.38313802083334, 110.81909179687541, -7.798751027960526, 16.55490451388889, 10.526660156250001],
[0.9244791666666667, 44.081624348958336, 111.57747476407839, -7.1175986842105265, 15.993381076388891, 8.136035156250001],
[-1.761881510416667, 44.0869140625, 111.5477790454831, -5.7005550986842115, 15.877278645833334, 4.10009765625],
[-4.607747395833334, 44.17195638020833, 111.32506115601835, -4.126233552631579, 15.900065104166666, -0.24873046875000004],
[-5.840657552083334, 44.74853515625001, 109.82885379602453, -3.2662160773026314, 16.75075954861111, -2.316796875],
[-6.738688151041667, 45.221761067708336, 108.63759862314399, -2.6833624588815796, 17.44140625, -3.7775390625000003],
[-7.899576822916666, 45.89029947916667, 106.97121195273864, -1.9844777960526316, 18.405490451388886, -5.607421875000001],
[-5.270182291666667, 45.701497395833336, 107.42121630375968, -3.28125, 18.180338541666664, -1.7771484375],
[-3.7447102864583335, 47.730305989583336, 106.99329338451463, -4.384123149671053, 16.60915798611111, 0.8024414062499999],
[-3.741048177083333, 51.005859375, 105.8972167968754, -5.02903988486842, 14.423285590277779, 1.4625000000000001],
[-3.739420572916667, 52.92032877604167, 105.17271740601834, -5.471962376644737, 13.231879340277779, 1.9133789062500002],
[-3.736979166666667, 51.717936197916664, 105.63223961556352, -5.188630756578948, 11.959635416666668, 1.60927734375],
[-3.7259928385416665, 51.79931640625, 105.39429315246016, -5.127724095394736, 11.113823784722223, 1.5556640625],
[-3.8761393229166665, 50.67057291666668, 108.73848792349979, -6.606059827302632, 3.890516493055556, 2.8916015625],
[-4.032796223958334, 49.67814127604168, 111.84473623143606, -13.705155222039473, -0.2191840277777778, 9.836718750000001],
[-4.068603515625, 49.47224934895833, 113.51873718866068, -7.340023643092106, -2.687717013888889, -0.5642578125000001],
[-4.068603515625, 49.47265625, 114.5184930480357, -7.340409128289473, -2.687717013888889, -0.5642578125000001],
[-4.068603515625, 49.47224934895833, 114.51811233369473, -7.340409128289473, -6.688368055555556, -0.5642578125000001],
[-4.33349609375, 48.338216145833336, 118.83046367380923, -5.781506990131578, -11.865234375, -2.408203125],
[-3.145751953125, 47.751057942708336, 121.36107189820589, -3.109323601973684, -16.797417534722225, -3.9700195312500006],
[-1.153564453125, 47.73111979166667, 121.4391183381038, 0.08673416940789473, -16.8505859375, -5.27080078125],
[0.8500162760416666, 47.72705078125, 121.44368691019538, 3.287032277960526, -16.866861979166668, -6.5663085937500005],
[0.8500162760416666, 47.72705078125, 121.44368691019538, 3.285104851973684, -16.868489583333336, -15.56015625],
[-12.113444010416668, 48.015950520833336, 120.07159242535627, -18.472450657894736, -16.164822048611114, 7.8565429687499995],
[-10.367838541666668, 47.926839192708336, 120.44316962213847, -15.315712376644735, -16.338975694444446, 16.3283203125],
[-8.421630859375, 47.84912109375, 120.78352824296147, -11.924599095394736, -16.50499131944445, 15.77021484375],
[-6.909993489583334, 48.072509765625, 119.7712088103346, -9.91506476151316, -16.680230034722218, 15.205078124999998],
[-6.240641276041667, 49.82828776041667, 113.08129641089151, -16.823344983552627, -3.8378906250000004, 21.788964843749998],
[-5.853678385416667, 51.267903645833336, 108.36995644144532, -10.711477179276317, 6.349826388888889, 15.022265625000001],
[-5.72021484375, 51.86767578125, 106.53415188931042, -9.38232421875, 8.56608072916667, 13.80234375],
[-4.260660807291667, 52.977294921875, 103.275617844988, -11.211451480263158, 15.762261284722223, 11.972460937500001],
[-4.260660807291667, 52.977294921875, 103.275617844988, -11.211451480263158, 16.76215277777778, 11.972460937500001],
[-4.260660807291667, 52.977294921875, 103.275617844988, -11.211451480263158, 17.762044270833336, 11.972460937500001],
[-2.4841308593749996, 53.68082682291668, 101.27915184096572, -11.006758840460526, 19.14876302083334, 13.43759765625],
[-2.506510416666667, 53.377685546875, 102.11938839147625, -11.305509868421051, 18.614366319444446, 13.730273437500001],
[-2.506510416666667, 53.377685546875, 102.11900767713529, -11.305509868421051, 21.614583333333336, 13.730273437500001],
[-2.4088541666666674, 54.65738932291667, 98.59245073677326, -10.391524465460526, 25.815972222222225, 12.8056640625],
[-2.347412109375, 55.55460611979168, 96.20613324760247, -9.919690583881579, 31.279296874999996, 12.31435546875],
[-2.303466796875, 56.24552408854167, 94.39964369972189, -9.611302425986842, 32.375759548611114, 11.988281250000002],
[-2.29736328125, 56.349690755208336, 94.13314366104615, -9.567742598684212, 31.535915798611114, 11.941699218750003],
[-2.226969401041667, 57.57771809895834, 90.99681892017361, -9.121350740131577, 36.41276041666667, 11.4556640625],
[-2.104085286458334, 60.03987630208335, 84.93622732634621, -8.511513157894736, 49.958767361111114, 10.723535156249998],
[-1.0091145833333335, 60.553792317708336, 83.69433714611728, -8.054713199013158, 50.76063368055556, 11.3853515625],
[-0.9537760416666667, 63.23974609375, 77.37866694384311, -7.676937705592104, 59.344618055555564, 10.7912109375],
[-0.9537760416666667, 63.239339192708336, 77.37866694384311, -7.676937705592104, 61.34385850694446, 10.790332031250001],
[-0.5574544270833334, 65.30843098958334, 72.64334197091611, -7.335012335526316, 65.00813802083336, 10.66376953125],
[-0.5570475260416669, 65.36051432291667, 72.5249398108759, -7.331157483552632, 67.07302517361111, 10.65322265625],
[-0.5383300781249999, 67.093505859375, 68.62794781675458, -7.214740953947368, 69.21549479166667, 10.35703125],
[-0.5131022135416667, 69.31884765625, 63.691224957456924, -7.108347039473683, 79.88172743055556, 9.997558593749998],
[-0.5126953125, 69.31844075520833, 63.691224957456924, -7.108732524671053, 76.88042534722223, 9.997558593749998],
[0.260009765625, 65.00040690104167, 73.29855135171746, -7.0223838404605265, 65.65592447916667, 11.23505859375],
[0.43660481770833337, 64.576416015625, 74.25909363397304, -6.971885279605263, 65.13183593750001, 11.4345703125],
[0.5668131510416666, 64.15934244791667, 75.2078337716587, -6.943359375, 64.609375, 11.59716796875],
[1.5425618489583337, 64.17561848958333, 75.16024447903803, -6.500051398026315, 64.70594618055556, 12.290625],
[4.86572265625, 64.3798828125, 74.67749869469397, -18.924239309210527, 65.51812065972224, 14.49228515625],
[6.427408854166667, 64.549560546875, 74.27432220761166, -20.150082236842106, 66.06282552083334, 15.457324218750001],
[7.304280598958333, 64.67081705729167, 73.99602002436599, -23.706954152960527, 66.40028211805554, 15.9873046875],
[7.304280598958333, 64.67041015625001, 73.99602002436599, -25.706851356907894, 66.39919704861111, 15.9873046875],
[10.130615234375, 63.645833333333336, 76.32180393332331, -34.53908819901316, 66.03841145833334, 18.3708984375],
[10.642496744791666, 62.900390625000014, 78.04072918278185, -35.518606085526315, 65.42860243055557, 19.273535156250002],
[11.983642578125, 62.43570963541667, 79.11891219639571, -34.95001541940789, 65.40201822916667, 20.407324218750002],
[-1.7240397135416667, 57.3583984375, 79.02068789642664, -1.136410361842105, 56.89832899305556, 2.6613281250000003]])
  
    for i in range(desired_joint.shape[0]):
        setJoints(desired_joint[i])
        time.sleep(0.01)

    desired_joint = np.array([[-2.860514322916667, 56.07706705729167, 80.76702457843473, -1.4579050164473686, 56.379665798611114, -1.2823242187500001],
[-2.8853352864583335, 58.45418294270834, 81.0186767578128, -1.510716488486842, 53.73101128472222, -1.21376953125],
[-3.907877604166667, 59.35791015625, 81.0594131922961, -1.8237304687500002, 52.75010850694445, -3.994628906249999]
])
    for i in range(desired_joint.shape[0]):
        setJoints(desired_joint[i])
        time.sleep(0.01)
    """
    #setJoints(desired_joint)

    #desired_pose = np.array([[320,30,155,180,0,180],[320,-45,155,180,0,180],[330,-45,155,180,0,180],[300,-30,155,180,0,180],[340,-10,155,180,0,180],[320,31,155,180,0,180],[270,20,130,180,30,180],[255,-50,130,180,30,180],[410,-40,130,180,-30,180],[410,20,130,180,-30,180]])
    desired_pose = np.array([[320,0,155,180,0,180],[320,0,155,180,0,0]])
    for i in range(desired_pose.shape[0]):
        current_pose = getCartesian()
        print current_pose
        for j in range(3,6):
            if current_pose[j] - desired_pose[i][j] > 350:
                current_pose[j] = current_pose[j] - 360
            else:
                if current_pose[j] - desired_pose[i][j] < -350:
                    current_pose[j] = current_pose[j] + 360
        step = max(abs(current_pose - desired_pose[i]))*10
	
        for j in range(int(round(step))):
            cmd_pose = np.array(current_pose)*(step-1-j)/(step-1) + desired_pose[i]*j/(step-1)
            print cmd_pose
            desired_quat = transform.quaternion_from_euler(math.radians(cmd_pose[3]),math.radians(cmd_pose[4]),math.radians(cmd_pose[5]),'sxyz')
            setCartesian(cmd_pose[0:3].tolist()+desired_quat.tolist())
            time.sleep(0.01)
    """

